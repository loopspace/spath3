% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
calligraphy --- a style file for doing calligraphy with TikZ/PGF
E-mail: stacey@math.ntnu.no
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

This package defines a way of simulating calligraphic lines with TikZ/PGF.
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
calligraphy --- a style file for doing calligraphy with TikZ/PGF
E-mail: stacey@math.ntnu.no
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2011 by Andrew Stacey <stacey@math.ntnu.no>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Andrew Stacey.

This work consists of the file  calligraphy.dtx
and the derived files           calligraphy.ins,
                                calligraphy.pdf, and
                                calligraphy.sty.

\endpostamble
\usedir{tex/latex/calligraphy}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/calligraphy}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/demopkg}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{calligraphy}[2011/05/19 v1.0 Calligraphic commands with TikZ]
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
%\usepackage{morefloats}
\usepackage{tikz}
\usetikzlibrary{decorations.pathreplacing,matrix}
\usepackage{\jobname}
\usepackage[numbered]{hypdoc}
\definecolor{lstbgcolor}{rgb}{0.9,0.9,0.9} 
 
\usepackage{listings}
\lstloadlanguages{[LaTeX]TeX}
\lstset{breakatwhitespace=true,breaklines=true,language=TeX}
 
\usepackage{fancyvrb}

\newenvironment{example}
  {\VerbatimEnvironment
   \begin{VerbatimOut}[gobble=2]{example.out}}
  {\end{VerbatimOut}
   \begin{center}
%   \setlength{\parindent}{0pt}
   \fbox{\begin{minipage}{.9\linewidth}
     \lstset{breakatwhitespace=true,breaklines=true,language=TeX,basicstyle=\small}
     \lstinputlisting[]{example.out}
   \end{minipage}}

   \fbox{\begin{minipage}{.9\linewidth}
     \input{example.out}
   \end{minipage}}
\end{center}
}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{1.0}{2011/05/03}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \providecommand*{\url}{\texttt}
% \GetFileInfo{calligraphy.dtx}
% \title{The \textsf{calligraphy} package}
% \author{Andrew Stacey \\ \url{stacey@math.ntnu.no}}
% \date{\fileversion~from \filedate}
%
%
% \maketitle
%
% 
% \section{Introduction}
% 
% The \Verb+calligraphy+ package is designed to enable calligraphic style drawings in TikZ.
% The idea is to be able to ``stroke'' a line with a ``pen''.
% As a simple example, compare the two lines in the following picture.
% 
% \begin{example}
% \begin{center}
% \begin{tikzpicture}
% \pen (-135:.25) -- (45:.25);
% \processpen
% \draw[line width=.5cm] (0,0) .. controls +(45:1) and +(-135:1) .. ++(3,0);
% \calligraphy (0,-1) .. controls +(45:1) and +(-135:1) .. ++(3,0);
% \end{tikzpicture}
% \end{center}
% \end{example}
% 
% The paths are identical in definition but the first is drawn using the standard TikZ path with a line width of .5cm.
% The second is ``stroked'' with a calligraphic pen of width .5cm angled at 45 degrees.
% 
% \section{How It Works}
% 
% To know how to use this package, it is worth knowing a little about how it works.
% A ``pen'' is a path, as is the line that is the template for the pen stroke.
% The two paths are joined together to form a region which is filled.
% Thus in constructing the example given in the introduction, the following path is built.
% 
% \begin{center}
% \begin{tikzpicture}
% \draw (0,-1) .. controls +(45:1) and +(-135:1) .. node (op) {} ++(3,0) -- node (pp) {} ++(45:.5) .. controls +(-135:1) and +(45:1) .. node (opr) {} ++(-3,0) -- node (ppr) {} (0,-1);
% \draw[<-] (op) -- ++(0,-.5) node[anchor=north] {original path};
% \draw[<-] (pp) -- ++(.5,0) node[anchor=west] {pen path};
% \draw[<-] (opr) -- ++(0,.5) node[anchor=south] {original path reversed};
% \draw[<-] (ppr) -- ++(-.5,0) node[anchor=east] {pen path reversed};
% \end{tikzpicture}
% \end{center}
% 
% What is important to note about this is that the ``pen'' isn't \emph{actually} dragged along the path, it is merely a simulation.
% This can be shown with the following simple example.
% The first is a continuous path that goes past the angle of the pen and thus the upstroke would involve pushing the pen.
% The second is how it is meant to be done, the second line is drawn from top to bottom.
% However, as the direction of the path isn't important, the same effect can be obtained by ``lifting the nib'' between the lines.
%
% \begin{example}
% \begin{center}
% \begin{tikzpicture}
% \pen (-135:.125) -- (45:.125);
% \processpen
% \calligraphy (0,0) -- (1,0) -- (1,1);
% \calligraphy (2,0) -- (3,0) (3,1) -- (3,0);
% \calligraphy (4,0) -- (5,0) +(0,0) -- (5,1);
% \end{tikzpicture}
% \end{center}
% \end{example}
%
% However, it should work as expected providing the following golden rule is not violated:
% 
% \begin{quotation}
% Never \emph{push} a calligraphic pen.
% \end{quotation}
% 
% This is good advice for ordinary calligraphy as well, so a path that is realisable as an honest calligraphic path should be fine with this package.
% Actually since, as remarked above, the direction of the path isn't important, a more accurate golden rule would be that one should never swap from pushing to pulling or vice versa without lifting the pen off the paper; but that isn't as succinct.
% 
% The paths for both pens and templates can be reasonably complicated.
% They can contain gaps, but should not contain closed paths, nor rectangles.
% The implementation works by breaking a path into its constituent pieces (broken up by ``move to''s) and working bit by bit.
% 
% \begin{example}
% \begin{center}
% \begin{tikzpicture}
% \pen (-135:.25) -- (-135:.125) (45:.125) -- (45:.25);
% \processpen
% \calligraphy (0,0) .. controls +(45:1) and +(-135:1) .. +(3,0) ++(1.5,0) .. controls +(-135:2) and +(45:2) .. +(0,-4)  (0,-4) .. controls +(45:1) and +(-135:1) .. +(3,0);
% \end{tikzpicture}
% \end{center}
% \end{example}
% 
% \section{Copperplate}
% 
% Copperplate pens are somewhat special.
% They are ``thin'' so don't need the same treatment as a ``thick'' pen, but one should be able to vary the pressure with a copperplate pen to get a variation of thickness.
% Specifying a copperplate pen is straightforward: it is a pen with no thickness.
% 
% \begin{example}
% \begin{center}
% \begin{tikzpicture}[line width=2pt]
% \pen (0,0);
% \processpen
% \calligraphy[heavy] (0,0) .. controls +(45:1) and +(-135:1) .. +(3,0) ++(1.5,0) .. controls +(-135:2) and +(45:2) .. +(0,-3)  (0,-3) .. controls +(45:1) and +(-135:1) .. +(3,0);
% \calligraphy[light] (4,0) .. controls +(45:1) and +(-135:1) .. +(3,0) ++(1.5,0) .. controls +(-135:2) and +(45:2) .. +(0,-3)  (4,-3) .. controls +(45:1) and +(-135:1) .. +(3,0);
% \end{tikzpicture}
% \end{center}
% \end{example}
% 
% With a copperplate pen, the segments of a path are tapered.
% Copperplate and normal pens can be mixed.
% Any part of the pen specification that has no length is treated as a copperplate pen.
% 
% \begin{example}
% \begin{center}
% \begin{tikzpicture}[line width=1pt]
% \pen (-135:.125) -- (0,0) (45:.125);
% \processpen
% \calligraphy (0,0) .. controls +(45:1) and +(-135:1) .. +(3,0) ++(1.5,0) .. controls +(-135:2) and +(45:2) .. +(0,-3)  (0,-3) .. controls +(45:1) and +(-135:1) .. +(3,0);
% \end{tikzpicture}
% \end{center}
% \end{example}
% 
% \section{Annotations}
% 
% As an addition, calligraphic paths can be annotated to show how they were constructed.
% A path with an arrow is drawn at a set offset from the last part of the path.
% 
% \begin{example}
% \begin{center}
% \begin{tikzpicture}[line width=1pt]
% \pen (-135:.125) -- (0,0) (45:.125);
% \processpen
% \calligraphy[annotate] (0,0) .. controls +(45:1) and +(-135:1) .. +(3,0) ++(1.5,0) .. controls +(-135:2) and +(45:2) .. +(0,-3)  (0,-3) .. controls +(45:1) and +(-135:1) .. +(3,0);
% \end{tikzpicture}
% \end{center}
% \end{example}
% 
% \section{Style Options}
% 
% There are plenty of options for styling the paths and pens.
% 
% \subsection{Definition Options}
% 
% Defining a pen is a two-step process.
% First a pen has to be \emph{defined} and then \emph{processed}.
% The reason that it has to be done in two steps is due to the internals of the package.
% To define a pen, the user has to specify a path.
% That path is stored in a global macro and so can be accessed in throughout the document.
% However, before being used, the pen has to be processed.
% At this stage, the pen is converted from a macro in to a special object.
% These special objects are local and cannot (at present) be made global.
% Thus whilst a pen can be \emph{defined} inside a group, the \emph{processing} stage has to happen in the outermost group in which the pen is going to be used.
% As the TikZ path construction system takes place inside a group, this means that it is not easily possible to combine the two stages in to one.
%
% The following macros and keys are used to set up and use a pen.
% All the keys are in the \Verb+/pgf/calligraphy+ family.
%
% \begin{itemize}
% \item \DescribeMacro{define pen}If the \Verb+define pen+ key is specified on a path then that path will be used to define a pen.
% It can take one option which will be the pen name, if not specified then \Verb+default+ is assumed.
% The resulting path will not be counted for bounding box considerations.
% When the pen is used, the origin will correspond to the path along which it is dragged.
%
% \item \DescribeMacro{pen name}The key \Verb+pen name=name+ sets the name for the current pen.
% This can be used either when defining or using a pen.
%
% \item \DescribeMacro{\pen}\DescribeMacro{\definepen}The macros \Verb+\pen+ and \Verb+\definepen+ are equivalent to the TikZ commands \Verb+\draw+ or \Verb+\fill+ in that it acts like a path command but stores the path as a pen.
% (The two macros are the same.)
% These macros also change the ``key family'' to \Verb+/pgf/calligraphy+ so that any further options do not need their full path.
%
% \item \DescribeMacro{\processpen}The macro \Verb+\processpen+ processes a pen so that it is set up for using later on.
% As remarked earlier, it has to be given at least at the outermost grouping of where it will be used.
% It takes an optional argument which is the pen name.
%
% \item \DescribeMacro{use pen}The key \Verb+use pen=name+ on a path means that that path should be ``stroked'' with the pen (\Verb+default+ if no name is given, or none specified via the \Verb+pen name+ key).
%
% \item \DescribeMacro{\calligraphy}The macro \Verb+\calligraphy+ is a shortcut for specifying a path with the key \Verb+use pen+ already set.
% This macro also changes the ``key family'' to \Verb+/pgf/calligraphy+ so that any further options do not need their full path.
% \end{itemize}
% 
% \subsection{Style Options}
% 
% There are various options available for styling the calligraphic paths.
% All of these are in the \Verb+/pgf/calligraphy+ key family, but the \Verb+\calligraphy+ command automatically switches to that family so the key path is not needed.
% Any unknown keys are processed as follows:
%
% \begin{enumerate}
% \item A check is made to see if a pen of that name has been defined.
% If so, that pen is used.
% This is similar to the \Verb+\node[shape]+ syntax
%
% \item A check is made to see if the unknown key corresponds to a colour.
% If so, that colour is installed as the pen colour.
% This is similar to the colour handling of TikZ paths.
% (In fact, it uses the same code.)
%
% \item All other unknown options are passed on to TikZ.
% \end{enumerate}
%
% The style options are as follows.
%
% \begin{itemize}
% \item \DescribeMacro{pen colour}The \Verb+pen colour+ style defines the default colour to be used.
% Since calligraphic paths are sometimes filled and sometimes stroked, this ensures that the colour is used correctly.
% 
% \item \DescribeMacro{pen nib}It is possible to style particular ``nibs'' (i.e., segments of the pen path) separately.
% This is the \Verb+pen nib+ option, which takes two arguments.
% The first is the index of the part of the nib and the second is the style options to be applied.
% 
% \item \DescribeMacro{line style}It is also possible to style particular parts of the template path.
% This is done by putting \Verb+[line style={}]+ in the template path at the relevant part.
% The style is saved and applied to that segment of the template path.
% 
% \item \DescribeMacro{taper}The tapering of copperplate paths can be controled by the \Verb+taper+ option.
% It takes arguments \Verb+none+, \Verb+both+, \Verb+start+, and \Verb+end+.
% 
% \item \DescribeMacro{weight}\DescribeMacro{heavy}\DescribeMacro{light}Copperplate paths come in two ``weights'': \emph{heavy} and \emph{light}.
% The weight also affects the tapering: by default a light path is tapered to nothing whilst a heavy path is tapered to the width of a light path.
% Weights can be specified by either \Verb+weight=weight+ or just \Verb+heavy+ and \Verb+light+.
% It is possible to change the weight for different components of a path using the \Verb+line style+ key.
% With tapering, this means that one can easily vary from a light stroke to a heavy one.
% The relevant widths are controlled by the keys \DescribeMacro{heavy line width}\Verb+heavy line width+ and the \DescribeMacro{light line width}\Verb+light line width+.
% The \DescribeMacro{taper line width}\Verb+taper line width+, is set automatically by the weight but can be altered afterwards using the \Verb+taper line width+ key.
% 
% \item \DescribeMacro{annotate}The key \Verb+annotate+ switches on annotations.
% The style of the annotations is controlled by the keys \DescribeMacro{annotation style}\Verb+annotation style+, \DescribeMacro{annotation shift}\Verb+annotation shift+ which controls how the annotation path is shifted from the final component of the calligraphic path, \DescribeMacro{annotation nodes style}\Verb+annotation nodes style+ for global style of the nodes, \DescribeMacro{annotation node style}\Verb+annotation node style+ for styling of particular nodes.
% This latter takes two options: the node number and the style to be applied.
% The annotation path and annotation node styles take ordinary TikZ styling options.
% \end{itemize}
%
% \begin{example}
% \begin{center}
% \processpen
% \begin{tikzpicture}
% \calligraphy[pen colour=green,pen nib={2}{color=red}] (0,0) .. controls +(45:1) and +(-135:1) .. +(3,0) ++(1.5,0) .. controls +(-135:2) and +(45:2) .. +(0,-3)  (0,-3) .. controls +(45:1) and +(-135:1) .. +(3,0);
% \calligraphy[annotate,annotation node style={2}{circle,draw,fill=white}] (4,0) .. controls +(45:1) and +(-135:1) .. +(3,0) ++(1.5,0) .. controls +(-135:2) and +(45:2) .. +(0,-3)  (4,-3) .. controls +(45:1) and +(-135:1) .. +(3,0);
% \calligraphy[pen nib style={line width=1pt}] (0,-4) .. controls +(45:1) and +(-135:1) .. +(3,0) ++(1.5,0) .. controls +(-135:2) and +(45:2) .. +(0,-3)  (0,-7) .. controls +(45:1) and +(-135:1) .. +(3,0);
% \calligraphy[annotate,annotation style={dashed,->}] (4,-4) .. controls +(45:1) and +(-135:1) .. +(3,0) ++(1.5,0) .. controls +(-135:2) and +(45:2) .. +(0,-3)  (4,-7) .. controls +(45:1) and +(-135:1) .. +(3,0);
% \end{tikzpicture}
% \end{center}
% \end{example}
% 
% \section{Decorations}
%
% If a TikZ/PGF decorations library is loaded, then the \Verb+calligraphy+ package defines some decorations that use the calligraphic paths, specifically with the copperplate nib.
% The current decorations are:
%
% \begin{itemize}
% \item \DescribeMacro{calligraphic brace}\Verb+calligraphic brace+ for a brace.
% \item \DescribeMacro{calligraphic straight parenthesis}\Verb+calligraphic straight parenthesis+ for a parenthesis with straight middle component.
% \item \DescribeMacro{calligraphic curved parenthesis}\Verb+calligraphic curved parenthesis+ for a parenthesis with a curved middle component.
% \end{itemize}
%
% All the above use the \Verb+amplitude+ option to specify their size.
% The following is an example of their use, together with the standard \Verb+brace+ and the \Verb+delimiter+ key from the \Verb+matrix+ library for comparison.
%
% \begin{example}
% \begin{center}
% \begin{tikzpicture}
% \draw[decorate,decoration={calligraphic brace,amplitude=4mm},ultra thick] (0,0) -- (0,8);
% \draw[line width=2pt,decorate,decoration={brace,amplitude=10},line cap=round] (1,0) -- ++(0,8);
% \node[anchor=south west,minimum height=8cm,outer sep=0pt,left delimiter=\{] (a) at (2,0) {};
% \draw[decorate,decoration={calligraphic straight parenthesis,amplitude=4mm},ultra thick] (3,0) -- ++(0,8);
% \draw[decorate,decoration={calligraphic curved parenthesis,amplitude=4mm},ultra thick] (4,0) -- ++(0,8);
% \node[anchor=south west,minimum height=8cm,outer sep=0pt,left delimiter=(] (a) at (5,0) {};
% \end{tikzpicture}
% \end{center}
% \end{example}
%
% \StopEventually{}
%
% \section{Implementation}
%
% \iffalse
%<*package>
% \fi
%
%    \begin{macrocode}
\ProvidesPackage{calligraphy}
\RequirePackage{spath}
%    \end{macrocode}
%
%    \begin{macrocode}
\newif\ifcalligraphy@annotate
\newif\ifcgrphy@taper@start
\newif\ifcgrphy@taper@end
\cgrphy@taper@starttrue
\cgrphy@taper@endtrue
\newcounter{cgrphy@label}
\newcounter{cgrphy@nib}
\newcounter{cgrphy@path@parts}
\pgfkeys{
  /tikz/irrelevant for bounding box/.code={
    \pgf@relevantforpicturesizefalse
  },
  /tikz/calligraphy/.style={
    /pgf/calligraphy/.cd
  },
  /pgf/calligraphy/.unknown/.code={%
    \let\cgrphy@key=\pgfkeyscurrentname%
    % Is it a pen name?
    \expandafter\ifx\csname calligraphy@pen@\cgrphy@key\endcsname\relax
    % No, is it a colour?
    \expandafter\pgfutil@in@\expandafter!\expandafter{\cgrphy@key}%
    \ifpgfutil@in@%
      % Yes, it is a colour
\message{It is a colour: \cgrphy@key}%
      \pgfkeyslet{/pgf/calligraphy/pen colour}{\cgrphy@key}%
    \else
    \pgfutil@doifcolorelse{\cgrphy@key}
{
  \pgfkeyslet{/pgf/calligraphy/pen colour}{\cgrphy@key}%
}{
    % Pass it on to TikZ to see if that can make use of it
     \pgfkeysalso{%
       /tikz/\cgrphy@key={#1}%
     }
}
    \fi
    \else
    % Is a pen name, install it
      \pgfkeyslet{/pgf/calligraphy/pen name}{\cgrphy@key}%
    \fi
  },
  /pgf/calligraphy/.cd,
  define pen/.style={
    /tikz/irrelevant for bounding box,
    save pen,
    pen name=#1,
  },
  pen name/.initial=default,
  save pen/.code={
    \tikz@addmode{\pgfsyssoftpath@getcurrentpath\calligraphy@pen@default
    \expandafter\global\expandafter\let\csname calligraphy@pen@\pgfkeysvalueof{/pgf/calligraphy/pen name}@path\endcsname=\calligraphy@pen@default}
  },
  use pen/.default=default,
  use pen/.code={
    \tikz@addmode{\pgfsyssoftpath@getcurrentpath\calligraphy@main@path
      \global\let\calligraphy@main@path=\calligraphy@main@path}
    \let\pgfpathmoveto=\cgrphy@pathmoveto
    \setcounter{cgrphy@path@parts}{0}%
    \tikz@addmode{\cgrphy@thickenpath{\calligraphy@main@path}{\pgfkeysvalueof{/pgf/calligraphy/pen       name}}}%
  },
  pen colour/.initial=black,
  annotate if/.is if=calligraphy@annotate,
  annotate/.style={
    annotate if,
    annotate reset
  },
  annotate reset/.code={
    \setcounter{cgrphy@label}{0}
  },
  annotation style/.initial={->},
  annotation shift/.initial={(0,1ex)},
  annotation nodes style/.initial={anchor=south east},
  pen nib/.code 2 args={
    \expandafter\def\csname calligraphy@nib@style@#1\endcsname{#2}
  },
  annotation node style/.code 2 args={
    \expandafter\def\csname calligraphy@annotation@style@#1\endcsname{#2}
  },
  pen nib style/.initial={},
  weight/.is choice,
  weight/heavy/.style={
    line width=\pgfkeysvalueof{/pgf/calligraphy/heavy line width},
    taper line width=\pgfkeysvalueof{/pgf/calligraphy/light line width},
  },
  weight/light/.style={
    line width=\pgfkeysvalueof{/pgf/calligraphy/light line width},
    taper line width=0pt,
  },
  heavy/.style={
    weight=heavy
  },
  light/.style={
    weight=light
  },
  heavy line width/.initial=2pt,
  light line width/.initial=1pt,
  line width/.initial=1pt,
  taper line width/.initial=0pt,
  taper/.is choice,
  taper/none/.style={
    taper at start=false,
    taper at end=false,
  },
  taper/both/.style={
    taper at start=true,
    taper at end=true,
  },
  taper/start/.style={
    taper at start=true,
    taper at end=false,
  },
  taper/end/.style={
    taper at start=false,
    taper at end=true,
  },
  taper at start/.is if=cgrphy@taper@start,
  taper at end/.is if=cgrphy@taper@end,
  line style/.code={
    \expandafter\def\csname calligraphy@part@style@\the\value{cgrphy@path@parts}\endcsname{#1}%
  },
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\calligraphystyle}
%    \begin{macrocode}
\newcommand{\calligraphystyle}[1]{\pgfkeys{/pgf/calligraphy/.cd,#1}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pen}
%    \begin{macrocode}
\newcommand{\pen}[1][]{\path[calligraphy,define pen,#1]}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\calligraphy}
%    \begin{macrocode}
\newcommand{\calligraphy}[1][]{\path[calligraphy,use pen,#1]}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\definepen}
%    \begin{macrocode}
\newcommand{\definepen}[1][]{\tikz \path[calligraphy,define pen,#1]}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\processpen}
%    \begin{macrocode}
\newcommand{\processpen}[1][default]{%
\expandafter\let\expandafter\cgrphy@tmp@path\csname calligraphy@pen@#1@path\endcsname
    \expandafter\spathsplit\csname calligraphy@pen@#1\endcsname\cgrphy@tmp@path
    \expandafter\let\expandafter\cgrphy@temp\csname calligraphy@pen@#1\endcsname
    \cgrphy@temp.apply to paths(prepare,)}
%    \end{macrocode}
% \end{macro}
%
% Calligraphy commands
%
% Thicken a piece of the path with the pen
% So we step through the pen path, thickening
%
%    \begin{macrocode}
\let\cgrphy@orig@pathmoveto=\pgfpathmoveto

\def\cgrphy@pathmoveto#1{%
  \stepcounter{cgrphy@path@parts}%
  \cgrphy@orig@pathmoveto{#1}%
}

\def\cgrphy@thickenpath#1#2{%
  \spathsplit\cgrphy@path#1\relax
  \expandafter\let\expandafter\cgrphy@pen@path\csname calligraphy@pen@#2\endcsname
\ifx\cgrphy@pen@path\relax
\message{Unknown pen: #2}%
\else
  \let\cgrphy@pen@path@start=\cgrphy@pen@path
  \setcounter{cgrphy@path@parts}{1}%
  \setcounter{cgrphy@nib}{1}%
  \setcounter{cgrphy@label}{0}%
  \pgfsys@beginscope
  \pgfsys@beginscope
\begingroup
  \expandafter\let\expandafter\cgrphy@style\csname calligraphy@part@style@\the\value{cgrphy@path@parts}\endcsname
  \ifx\cgrphy@style\relax
  \else
  \expandafter\calligraphystyle\expandafter{\cgrphy@style}%
  \fi
  \cgrphy@@thickenpath
\endgroup
  \pgfsys@endscope
  \pgfsys@endscope
\fi
}

\def\cgrphy@@thickenpath{%
  \pgfsys@beginscope
  \cgrphy@pen@path.get(path,\cgrphy@this@nib)%
\begingroup
  \expandafter\let\expandafter\cgrphy@style\csname calligraphy@nib@style@\the\value{cgrphy@nib}\endcsname
  \ifx\cgrphy@style\relax
  \else
  \expandafter\calligraphystyle\expandafter{\cgrphy@style}%
  \fi
  \pgfsetstrokecolor{\pgfkeysvalueof{/pgf/calligraphy/pen colour}}%
  \pgfsetfillcolor{\pgfkeysvalueof{/pgf/calligraphy/pen colour}}%
  \pgfsetlinewidth{\pgfkeysvalueof{/pgf/calligraphy/line width}}%
  \cgrphy@path.get(path,\cgrphy@this@path)%
  \cgrphy@this@path.prepare()%
  \cgrphy@this@nib.get(length,\cgrphy@nib@length)%
  \cgrphy@this@nib.get(initial point,\cgrphy@pt)%
  \cgrphy@pt
  \cgrphy@this@path.translate path(\cgrphy@tr@path,\the\pgf@x,\the\pgf@y)%
  \ifnum\cgrphy@nib@length=1\relax
  \cgrphy@tr@path.at least three()%
\edef\cgrphy@temp{\pgfkeysvalueof{/pgf/calligraphy/taper line width}}%
  \cgrphy@tr@path.let(taper line width,\cgrphy@temp)%
   \ifcgrphy@taper@start
    \cgrphy@tr@path.split path by real length(\cgrphy@st@path,\cgrphy@rest@path,1)%
    \cgrphy@st@path.taper out()%
    \cgrphy@st@path.use path(fill)%
   \else
    \let\cgrphy@rest@path=\cgrphy@tr@path
   \fi
   \ifcgrphy@taper@end
    \cgrphy@rest@path.split path by real length(\cgrphy@rest@path,\cgrphy@end@path,-1)%
    \cgrphy@end@path.taper in()%
    \cgrphy@end@path.use path(fill)%
   \fi
    \cgrphy@rest@path.use path(stroke)%
  \else
  \cgrphy@tr@path.weld(,\cgrphy@this@nib)%
  \cgrphy@tr@path.weld reverse(,\cgrphy@this@path)%
  \cgrphy@tr@path.weld reverse(,\cgrphy@this@nib)%
    \cgrphy@tr@path.use path(fill)%
  \fi
\endgroup
  \pgfsys@endscope
  \let\cgrphy@next=\cgrphy@@thickenpath
  \cgrphy@pen@path.get(next component,\cgrphy@pen@path)%
  \stepcounter{cgrphy@nib}%
  \ifx\cgrphy@pen@path\pgfutil@empty
  \ifcalligraphy@annotate
  \cgrphy@annotatepath
  \fi
\endgroup
   \pgfsys@endscope
   \pgfsys@beginscope
  \let\cgrphy@next=\cgrphy@@thickenpath
   \let\cgrphy@pen@path=\cgrphy@pen@path@start
   \setcounter{cgrphy@nib}{1}%
   \cgrphy@path.get(next component,\cgrphy@path)%
   \stepcounter{cgrphy@path@parts}%
\begingroup
  \expandafter\let\expandafter\cgrphy@style\csname calligraphy@part@style@\the\value{cgrphy@path@parts}\endcsname
  \ifx\cgrphy@style\relax
  \else
  \expandafter\calligraphystyle\expandafter{\cgrphy@style}%
  \fi
   \ifx\cgrphy@path\pgfutil@empty
    \let\cgrphy@next=\relax
   \fi
  \fi
  \cgrphy@next
}

\def\cgrphy@annotatepath{%
  \pgfsys@beginscope
\begingroup
  \pgfkeysgetvalue{/pgf/calligraphy/annotation style}{\cgrphy@annotation@style}
  \let\tikz@options=\pgfutil@empty
  \ifx\cgrphy@annotation@style\relax
  \else
   \expandafter\calligraphystyle\expandafter{\cgrphy@annotation@style}
  \fi
  \tikz@options
  \cgrphy@path.get(path,\cgrphy@this@path)%
  \cgrphy@this@path.prepare()%
  \tikz@scan@one@point\cgrphy@getpt\pgfkeysvalueof{/pgf/calligraphy/annotation shift}%
  \cgrphy@this@path.translate path(\cgrphy@tr@path,\the\pgf@x,\the\pgf@y)%
\cgrphy@this@nib.final point()%
  \cgrphy@tr@path.translate path(,\the\pgf@x,\the\pgf@y)%
  \cgrphy@tr@path.reprocess()%
  \def\cgrphy@temp{\cgrphy@tr@path.use path with tikz(}%
\ge@addto@macro\cgrphy@temp\cgrphy@annotation@style
\g@addto@macro\cgrphy@temp{,draw)}%
\cgrphy@temp
  \stepcounter{cgrphy@label}%
  \cgrphy@tr@path.get(final point,\cgrphy@pt)%
  \pgfkeysgetvalue{/pgf/calligraphy/annotation nodes style}{\cgrphy@node@options}%
  \ifx\cgrphy@node@options\relax
  \else
   \g@addto@macro\cgrphy@node@options{,}%
  \fi
  \expandafter\let\expandafter\cgrphy@node@style\csname calligraphy@annotation@style@\the\value{cgrphy@label}\endcsname
  \ifx\cgrphy@node@style\relax
  \else
   \ge@addto@macro{\cgrphy@node@options}{\cgrphy@node@style}%
  \fi
  \ifx\cgrphy@node@options\relax
  \let\cgrphy@node@options=\pgfutil@empty
  \fi
\cgrphy@pt
  \expandafter\node\expandafter[\cgrphy@node@options] at (\the\pgf@x,\the\pgf@y) {\arabic{cgrphy@label}};
\endgroup
  \pgfsys@endscope
}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\cgrphy@getpt#1{#1}
%    \end{macrocode}
%
% Some default pens: copperplate
%    \begin{macrocode}
\def\calligraphy@pen@copperplate@path{\pgfsyssoftpath@movetotoken{0pt}{0pt}}%
\processpen[copperplate]%
%    \end{macrocode}
%
%    \begin{macrocode}
% If the pgfdecoration module is loaded.
\expandafter\ifx\csname pgfdeclaredecoration\endcsname\relax
\else
\pgfdeclaredecoration{calligraphic brace}{brace}
{
  \state{brace}[width=+\pgfdecoratedremainingdistance,next state=final]
  {
    \pgfsyssoftpath@setcurrentpath{\pgfutil@empty}
    \pgfpathmoveto{\pgfpointorigin}
    \pgfpathcurveto
    {\pgfqpoint{.15\pgfdecorationsegmentamplitude}{.3\pgfdecorationsegmentamplitude}}
    {\pgfqpoint{.5\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
    {\pgfqpoint{\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
    {
      \pgftransformxshift{+\pgfdecorationsegmentaspect\pgfdecoratedremainingdistance}
      \pgfpathlineto{\pgfqpoint{-\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
      \pgfpathcurveto
      {\pgfqpoint{-.5\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
      {\pgfqpoint{-.15\pgfdecorationsegmentamplitude}{.7\pgfdecorationsegmentamplitude}}
      {\pgfqpoint{0\pgfdecorationsegmentamplitude}{1\pgfdecorationsegmentamplitude}}
      \pgfpathmoveto{\pgfqpoint{0\pgfdecorationsegmentamplitude}{1\pgfdecorationsegmentamplitude}}
      \pgfpathcurveto
      {\pgfqpoint{.15\pgfdecorationsegmentamplitude}{.7\pgfdecorationsegmentamplitude}}
      {\pgfqpoint{.5\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
      {\pgfqpoint{\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
    }
    {
      \pgftransformxshift{+\pgfdecoratedremainingdistance}
      \pgfpathlineto{\pgfqpoint{-\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
      \pgfpathcurveto
      {\pgfqpoint{-.5\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
      {\pgfqpoint{-.15\pgfdecorationsegmentamplitude}{.3\pgfdecorationsegmentamplitude}}
      {\pgfqpoint{0pt}{0pt}}
    }
    \pgfkeys{
      /pgf/calligraphy/line width=\pgflinewidth,
      /pgf/calligraphy/taper line width=.5\pgflinewidth
    }%
    \pgfsyssoftpath@getcurrentpath{\cgrphy@tmppath}%
    \cgrphy@thickenpath{\cgrphy@tmppath}{copperplate}%
  }
  \state{final}{}
}

\pgfdeclaredecoration{calligraphic straight parenthesis}{brace}
{
  \state{brace}[width=+\pgfdecoratedremainingdistance,next state=final]
  {
    \pgfsyssoftpath@setcurrentpath{\pgfutil@empty}
    \pgfpathmoveto{\pgfpointorigin}
    \pgfpathcurveto
    {\pgfqpoint{.15\pgfdecorationsegmentamplitude}{.3\pgfdecorationsegmentamplitude}}
    {\pgfqpoint{.5\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
    {\pgfqpoint{\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
    {
      \pgftransformxshift{+\pgfdecoratedremainingdistance}
      \pgfpathlineto{\pgfqpoint{-\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
      \pgfpathcurveto
      {\pgfqpoint{-.5\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
      {\pgfqpoint{-.15\pgfdecorationsegmentamplitude}{.3\pgfdecorationsegmentamplitude}}
      {\pgfqpoint{0pt}{0pt}}
    }
    \pgfkeys{
      /pgf/calligraphy/line width=\pgflinewidth,
      /pgf/calligraphy/taper line width=.5\pgflinewidth
    }%
    \pgfsyssoftpath@getcurrentpath{\cgrphy@tmppath}%
    \cgrphy@thickenpath{\cgrphy@tmppath}{copperplate}%
  }
  \state{final}{}%
}

\pgfdeclaredecoration{calligraphic curved parenthesis}{brace}
{
  \state{brace}[width=+\pgfdecoratedremainingdistance,next state=final]
  {
    \pgfsyssoftpath@setcurrentpath{\pgfutil@empty}
    \pgfpathmoveto{\pgfpointorigin}
    \pgfpathcurveto
    {\pgfqpoint{.1\pgfdecorationsegmentamplitude}{.2\pgfdecorationsegmentamplitude}}
    {\pgfqpoint{.25\pgfdecorationsegmentamplitude}{.375\pgfdecorationsegmentamplitude}}
    {\pgfqpoint{.5\pgfdecorationsegmentamplitude}{.5\pgfdecorationsegmentamplitude}}
    \pgf@xa=\pgfdecoratedremainingdistance\relax
    \advance\pgf@xa by -2\pgfdecorationsegmentamplitude\relax
    \pgf@xb=\pgfdecoratedremainingdistance\relax
    \advance\pgf@xb by -.5\pgfdecorationsegmentamplitude\relax
    \edef\cgrphy@xa{\the\pgf@xa}
    \edef\cgrphy@xb{\the\pgf@xb}
    \pgfpathcurveto
    {\pgfqpoint{2\pgfdecorationsegmentamplitude}{1.2\pgfdecorationsegmentamplitude}}
    {\pgfqpoint{\cgrphy@xa}{1.2\pgfdecorationsegmentamplitude}}
    {\pgfqpoint{\cgrphy@xb}{.5\pgfdecorationsegmentamplitude}}
    \pgf@xa=\pgfdecoratedremainingdistance\relax
    \advance\pgf@xa by -.25\pgfdecorationsegmentamplitude\relax
    \pgf@xb=\pgfdecoratedremainingdistance\relax
    \advance\pgf@xb by -.1\pgfdecorationsegmentamplitude\relax
    \pgf@xc=\pgfdecoratedremainingdistance\relax
    \edef\cgrphy@xa{\the\pgf@xa}
    \edef\cgrphy@xb{\the\pgf@xb}
    \edef\cgrphy@xc{\the\pgf@xc}
    \pgfpathcurveto
    {\pgfqpoint{\cgrphy@xa}{.375\pgfdecorationsegmentamplitude}}
    {\pgfqpoint{\cgrphy@xb}{.2\pgfdecorationsegmentamplitude}}
    {\pgfqpoint{\cgrphy@xc}{0pt}}
    \pgfkeys{
      /pgf/calligraphy/line width=\pgflinewidth,
      /pgf/calligraphy/taper line width=.5\pgflinewidth
    }%
    \pgfsyssoftpath@getcurrentpath{\cgrphy@tmppath}%
    \cgrphy@thickenpath{\cgrphy@tmppath}{copperplate}%
  }
  \state{final}{}%
}
% End if pgfdecoration module is loaded
\fi
%    \end{macrocode}
%
% \iffalse
%</package>
% \fi
%
% \Finale
\endinput
