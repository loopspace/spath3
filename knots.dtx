% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
knots --- a style file for drawing knot diagrams with TikZ/PGF
E-mail: stacey@math.ntnu.no
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

This package defines some commands for drawing knot diagrams with TikZ/PGF.
It was designed and tested with PGF2.10.
The initial idea of this package came from a question and answer on the site http://tex.stackexchange.com.
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
knots --- a style file for drawing knot diagrams with TikZ/PGF
E-mail: stacey@math.ntnu.no
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2011 by Andrew Stacey <stacey@math.ntnu.no>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Andrew Stacey.

This work consists of the files  knots.dtx
                                 knots_doc.tex
and the derived files            README.txt,
                                 knots.ins,
                                 knots.pdf,
                                 knots.sty,
                                 knots_doc.pdf.

\endpostamble
\usedir{tex/latex/knots}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/knots}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/demopkg}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{knots}[2011/10/24 v0.1 Tikz/PGF commands for drawing knot diagrams]
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
%\usepackage{morefloats}
\usepackage{tikz}
\usepackage{\jobname}
\usepackage[numbered]{hypdoc}
\definecolor{lstbgcolor}{rgb}{0.9,0.9,0.9} 
 
\usepackage{listings}
\lstloadlanguages{[LaTeX]TeX}
\lstset{breakatwhitespace=true,breaklines=true,language=TeX}
 
\usepackage{fancyvrb}

\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \providecommand*{\url}{\texttt}
% \GetFileInfo{knots.sty}
% \title{The \textsf{knots} package: codebase}
% \author{Andrew Stacey \\ \url{stacey@math.ntnu.no}}
% \date{\fileversion~from \filedate}
% 
% \maketitle
% 
% \section{Introduction}
% 
% This is a package for drawing knot diagrams using PGF/TikZ.
% Its inspiration was a question and answer on the website \url{http://tex.stackexchange.com}.
%
% \section{History}
%
% \StopEventually{}
%
% \section{Implementation}
%
% \iffalse
%<*package>
% \fi
%
% Test the version of PGF to see if it's what we expect.
% If not, issue a warning (but continue anyway; after all, it \emph{might just work}).
%    \begin{macrocode}
\def\knot@pgfversion{2.10}%
\ifx\pgfversion\knot@pgfversion
\else
\PackageWarning{knots}{This package was designed using PGF2.10; you are using \pgfversion.}%
\fi
%    \end{macrocode}
%    \begin{macrocode}
\RequirePackage{spath}
\usetikzlibrary{intersections}

\long\def\ge@addto@macro#1#2{%
  \begingroup
  \toks@\expandafter\expandafter\expandafter{\expandafter#1#2}%
  \xdef#1{\the\toks@}%
  \endgroup}

\newcount\knot@strings
\newcount\knot@intersections
\newif\ifknot@draftmode
\newif\ifknot@ignoreendpoints
\newif\ifknot@selfintersections
\newif\ifknot@superdraftmode
\knot@ignoreendpointstrue

\tikzoption{save knot path}{\tikz@addmode{\pgfsyssoftpath@getcurrentpath\knot@tmppath\expandafter\global\expandafter\let#1=\knot@tmppath}}

\tikzoption{use knot path}{\tikz@addmode{\expandafter\pgfsyssoftpath@setcurrentpath#1}}

\tikzset{
  knot/.is family,
  knot,
  only when rendering/.style={},
  ignore endpoint intersections/.is if=knot@ignoreendpoints,
  consider self intersections/.is if=knot@selfintersections,
  clip radius/.initial=10pt,
  clip width/.initial=3,
  flip crossing/.code={%
    \expandafter\def\csname knot@crossing@#1\endcsname{}%
  },
  background colour/.code={%
    \colorlet{knot@bg}{#1}%
  },
  background color/.code={%
    \colorlet{knot@bg}{#1}%
  },
  background colour=white,
  draft mode/.is choice,
  draft mode/off/.code={%
    \knot@draftmodefalse
    \knot@superdraftmodefalse
  },
  draft mode/crossings/.code={%
    \knot@draftmodetrue
    \knot@superdraftmodefalse
  },
  draft mode/strands/.code={%
    \knot@draftmodetrue
    \knot@superdraftmodetrue
  },
  draft/.is family,
  draft,
  clip radius/.initial=10pt,
  crossing first path/.style={blue,thick},
  crossing second path/.style={red,thick},
  crossing label/.style={fill=white,fill opacity=.5,text opacity=1,text=blue,anchor=south east,append after command={(\tikzlastnode.center) edge[blue,->] (\tikzlastnode.south east)}},
  strand label/.style={circle,draw=purple,fill=white,fill opacity=.5,text opacity=1,text=purple,inner sep=0pt},
}

\newenvironment{knot}[1][]{%
  \tikzset{knot/.cd,#1}%
  \knot@strings=0\relax
  \def\knot@redraws{}%
}{%
  \foreach \knot@str in {1,...,\the\knot@strings} {%
    \def\knot@options{draw,}%
    \expandafter\let\expandafter\knot@tmp\csname knot@string@opts@\knot@str\endcsname
    \ge@addto@macro\knot@options\knot@tmp
    \g@addto@macro\knot@options{,knot/only when rendering}
    \def\knot@marshal{\path[}
    \ge@addto@macro\knot@marshal\knot@options
    \g@addto@macro\knot@marshal{];}%
    \expandafter\let\expandafter\knot@tmp\csname knot@string@\knot@str\endcsname
    \pgfsyssoftpath@setcurrentpath\knot@tmp
    \knot@marshal
  }%
  \ifknot@superdraftmode
  \else
  % Define the spath objects, need to do so outside the loop
  \def\knot@marshal{}%
  \foreach \knot@str in {1,...,\the\knot@strings} {%
    \edef\knot@tmp{\noexpand\pgfoonew \expandafter\noexpand\csname knot@path@\knot@str\endcsname =new spath(\expandafter\noexpand\csname knot@string@\knot@str\endcsname)}%
    \ge@addto@macro\knot@marshal\knot@tmp
  }%
  \knot@marshal
  % If in draft mode, put labels at the ends of the strands
  % Split self-intersecting components
  % At this point, all transformation matrices have been applied so
  % we don't want to apply them again.
  \begin{scope}[reset cm]
  \foreach \knot@str in {1,...,\the\knot@strings} {%
    \ifknot@draftmode
    \csname knot@path@\knot@str\endcsname.initial point()%
    \pgf@xa=\pgf@x
    \pgf@ya=\pgf@y
    \node[knot/draft/strand label] at (\pgf@xa,\pgf@ya) {\knot@str};
    \csname knot@path@\knot@str\endcsname.final point()%
    \pgf@xa=\pgf@x
    \pgf@ya=\pgf@y
    \node[knot/draft/strand label] at (\pgf@xa,\pgf@ya) {\knot@str};
    \fi
    \ifknot@selfintersections
    \csname knot@path@\knot@str\endcsname.split self intersecting pieces()%
    \fi
  }
  % Split strands into components
  \def\knot@marshal{}%
  \pgfoonew \knot@slices =new spath component()
  \let\spath@this@component=\knot@slices
  \foreach \knot@str in {1,...,\the\knot@strings} {%
    \ifknot@selfintersections
    \edef\knot@tmp{\expandafter\noexpand\csname knot@path@\knot@str\endcsname.explode(\noexpand\spath@this@component)%
\noexpand\knot@slices.apply to paths(let if not empty,{scratch pad,\expandafter\noexpand\csname knot@string@opts@\knot@str\endcsname})%
}%
    \else
    \expandafter\let\expandafter\knot@tmp\csname knot@string@opts@\knot@str\endcsname
    \csname knot@path@\knot@str\endcsname.let(scratch pad,\knot@tmp)%
    \edef\knot@tmp{\noexpand\spath@this@component.set(path,\expandafter\noexpand\csname knot@path@\knot@str\endcsname)%
    \noexpand\pgfoonew \noexpand\spath@next@component =new spath component(\noexpand\spath@this@component)%
    \noexpand\spath@this@component.let(next component,\noexpand\spath@next@component)%
    \noexpand\let\noexpand\spath@this@component=\noexpand\spath@next@component
    }
    \fi
    \ge@addto@macro\knot@marshal\knot@tmp
  }
  \knot@marshal
  % Find intersections of each pair of strands
  \let\spath@execute@at@intersections=\knot@execute@at@intersections
  \knot@intersections=0\relax
  \knot@slices.at intersections()
  % Now do any redraws
  \knot@redraws
  \fi
  \end{scope}
}

\def\knot@execute@at@intersections{%
  \ifknot@ignoreendpoints
  \else
  \def\spath@ignore{0}%
  \fi
  \ifnum\spath@ignore=1\relax
  \else
   \global\advance\knot@intersections by 1\relax
    \pgfkeysgetvalue{/tikz/knot/clip radius}{\knot@clipradius}%
    \ifcsname knot@crossing@\the\knot@intersections\endcsname
     \let\knot@path@to@render=\spath@secondpath
    \else
     \let\knot@path@to@render=\spath@firstpath
    \fi
    \knot@path@to@render.get(scratch pad,\knot@options)%
    \begin{scope}
     \def\knot@clip@options{draw,}%
     \ge@addto@macro\knot@clip@options\knot@options
     \g@addto@macro\knot@clip@options{,knot@bg,line width=\pgfkeysvalueof{/tikz/knot/clip width}*\pgflinewidth}
     \clip (\spath@ix,\spath@iy) circle[radius=\knot@clipradius];
     \def\knot@marshal{\knot@path@to@render.use path with tikz(}
     \ge@addto@macro\knot@marshal\knot@clip@options
     \g@addto@macro\knot@marshal{)}%
     \knot@marshal
    \end{scope}
    \begin{scope}
     \clip (\spath@ix,\spath@iy) circle[radius=1.1*\knot@clipradius];
     \def\knot@line@options{draw,}%
     \ge@addto@macro\knot@line@options\knot@options
     \g@addto@macro\knot@line@options{,knot/only when rendering}
     \def\knot@marshal{\knot@path@to@render.use path with tikz(}
     \ge@addto@macro\knot@marshal\knot@line@options
     \g@addto@macro\knot@marshal{)}%
     \knot@marshal
    \end{scope}
    \ifknot@draftmode
    \node[knot/draft/crossing label] at (\spath@ix,\spath@iy) {\the\knot@intersections};
\fi
\fi
}%

\def\flipcrossings#1{%
  \tikzset{knot/flip crossing/.list={#1}}%
}

\newcommand{\strand}[1][]{%
  \advance\knot@strings by 1\relax
  \expandafter\def\csname knot@string@opts@\the\knot@strings\endcsname{#1}%
\path[#1,save knot path=\csname knot@string@\the\knot@strings\endcsname]}

\newcommand{\redraw}[2]{%
  \def\knot@tmp{%
    \pgfkeysgetvalue{/tikz/knot/clip radius}{\knot@clipradius}%
    \expandafter\let\expandafter\knot@options\csname knot@string@opts@#1\endcsname
    \begin{scope}
     \def\knot@clip@options{draw,}%
     \ge@addto@macro\knot@clip@options\knot@options
     \g@addto@macro\knot@clip@options{,knot@bg,line width=\pgfkeysvalueof{/tikz/knot/clip width}*\pgflinewidth}
     \clip #2 circle[radius=\knot@clipradius];
     \def\knot@marshal{\csname knot@path@#1\endcsname.use path with tikz(}
     \ge@addto@macro\knot@marshal\knot@clip@options
     \g@addto@macro\knot@marshal{)}%
     \knot@marshal
    \end{scope}
    \begin{scope}
     \clip #2 circle[radius=1.1*\knot@clipradius];
     \def\knot@line@options{draw,}%
     \ge@addto@macro\knot@line@options\knot@options
     \g@addto@macro\knot@options{,knot/only when rendering}
     \def\knot@marshal{\csname knot@path@#1\endcsname.use path with tikz(}
     \ge@addto@macro\knot@marshal\knot@line@options
     \g@addto@macro\knot@marshal{)}%
     \knot@marshal
    \end{scope}
  }
  \ge@addto@macro\knot@redraws\knot@tmp
}  

%    \end{macrocode}
% \iffalse
%</package>
% \fi
%
% \Finale

\endinput
